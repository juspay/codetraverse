{
  "kind": "variable",
  "name": "config",
  "module": "xyne/server/api/chat/utils",
  "value": "{ maxValidLinks } = config",
  "type_signature": null,
  "start_line": 44,
  "end_line": 44,
  "full_component_path": "xyne/server/api/chat/utils::config",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "searchToCitation",
  "module": "xyne/server/api/chat/utils",
  "value": "searchToCitation = (result: VespaSearchResults): Citation => {\n  const fields = result.fields\n  if (result.fields.sddocname === userSchema) {\n    return {\n      docId: (fields as VespaUser).docId,\n      title: (fields as VespaUser).name,\n      url: `https://contacts.google.com/${(fields as VespaUser).email}`,\n      app: (fields as VespaUser).app,\n      entity: (fields as VespaUser).entity,\n    }\n  } else if (result.fields.sddocname === fileSchema) {\n    return {\n      docId: (fields as VespaFile).docId,\n      title: (fields as VespaFile).title,\n      url: (fields as VespaFile).url || \"\",\n      app: (fields as VespaFile).app,\n      entity: (fields as VespaFile).entity,\n    }\n  } else if (result.fields.sddocname === mailSchema) {\n    return {\n      docId: (fields as VespaMail).docId,\n      title: (fields as VespaMail).subject,\n      url: `https://mail.google.com/mail/u/0/#inbox/${fields.docId}`,\n      app: (fields as VespaMail).app,\n      entity: (fields as VespaMail).entity,\n    }\n  } else if (result.fields.sddocname === eventSchema) {\n    return {\n      docId: (fields as VespaEvent).docId,\n      title: (fields as VespaEvent).name || \"No Title\",\n      url: (fields as VespaEvent).url,\n      app: (fields as VespaEvent).app,\n      entity: (fields as VespaEvent).entity,\n    }\n  } else if (result.fields.sddocname === mailAttachmentSchema) {\n    return {\n      docId: (fields as VespaMailAttachment).docId,\n      title: (fields as VespaMailAttachment).filename || \"No Filename\",\n      url: `https://mail.google.com/mail/u/0/#inbox/${\n        (fields as VespaMailAttachment).mailId\n      }?projector=1&messagePartId=0.${\n        (fields as VespaMailAttachment).partId\n      }&disp=safe&zw`,\n      app: (fields as VespaMailAttachment).app,\n      entity: (fields as VespaMailAttachment).entity,\n    }\n  } else if (result.fields.sddocname === chatMessageSchema) {\n    return {\n      docId: (fields as VespaChatMessage).docId,\n      title: (fields as VespaChatMessage).text,\n      url: `https://${(fields as VespaChatMessage).domain}.slack.com/archives/${\n        (fields as VespaChatMessage).channelId\n      }/p${(fields as VespaChatMessage).updatedAt}`,\n      app: (fields as VespaChatMessage).app,\n      entity: (fields as VespaChatMessage).entity,\n    }\n  } else {\n    throw new Error(\"Invalid search result type for citation\")\n  }\n}",
  "type_signature": null,
  "start_line": 46,
  "end_line": 105,
  "full_component_path": "xyne/server/api/chat/utils::searchToCitation",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "fields",
  "module": "xyne/server/api/chat/utils",
  "value": "fields = result.fields",
  "type_signature": null,
  "start_line": 47,
  "end_line": 47,
  "full_component_path": "xyne/server/api/chat/utils::fields",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "searchToCitations",
  "module": "xyne/server/api/chat/utils",
  "value": "searchToCitations = (\n  results: z.infer<typeof VespaSearchResultsSchema>[],\n): Citation[] => {\n  if (results.length === 0) {\n    return []\n  }\n  return results.map((result) => searchToCitation(result as VespaSearchResults))\n}",
  "type_signature": null,
  "start_line": 107,
  "end_line": 114,
  "full_component_path": "xyne/server/api/chat/utils::searchToCitations",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "textToCitationIndex",
  "module": "xyne/server/api/chat/utils",
  "value": "textToCitationIndex = /\\[(\\d+)\\]/g",
  "type_signature": null,
  "start_line": 116,
  "end_line": 116,
  "full_component_path": "xyne/server/api/chat/utils::textToCitationIndex",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "processMessage",
  "module": "xyne/server/api/chat/utils",
  "value": "processMessage = (\n  text: string,\n  citationMap: Record<number, number>,\n) => {\n  if (!text) {\n    return \"\"\n  }\n\n  text = splitGroupedCitationsWithSpaces(text)\n  return text.replace(textToCitationIndex, (match, num) => {\n    const index = citationMap[num]\n\n    return typeof index === \"number\" ? `[${index + 1}]` : \"\"\n  })\n}",
  "type_signature": null,
  "start_line": 118,
  "end_line": 132,
  "full_component_path": "xyne/server/api/chat/utils::processMessage",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "index",
  "module": "xyne/server/api/chat/utils",
  "value": "index = citationMap[num]",
  "type_signature": null,
  "start_line": 128,
  "end_line": 128,
  "full_component_path": "xyne/server/api/chat/utils::index",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "function",
  "name": "flattenObject",
  "module": "xyne/server/api/chat/utils",
  "parameters": [
    {
      "name": "obj",
      "type": ": any",
      "default": null
    },
    {
      "name": "parentKey",
      "type": null,
      "default": null
    }
  ],
  "type_signature": ": [string, string][]",
  "function_calls": [
    {
      "kind": "function_call",
      "name": "Object.entries(obj).flatMap",
      "resolved_callee": "xyne/server/api/chat/utils::Object.entries(obj).flatMap",
      "full_component_path": "xyne/server/api/chat/utils::Object.entries(obj).flatMap",
      "file_path": "xyne/server/api/chat/utils.ts"
    },
    {
      "kind": "function_call",
      "name": "Object.entries",
      "resolved_callee": "xyne/server/api/chat/utils::Object.entries",
      "full_component_path": "xyne/server/api/chat/utils::Object.entries",
      "file_path": "xyne/server/api/chat/utils.ts"
    },
    {
      "kind": "function_call",
      "name": "Array.isArray",
      "resolved_callee": "xyne/server/api/chat/utils::Array.isArray",
      "full_component_path": "xyne/server/api/chat/utils::Array.isArray",
      "file_path": "xyne/server/api/chat/utils.ts"
    },
    {
      "kind": "function_call",
      "name": "flattenObject",
      "resolved_callee": "xyne/server/api/chat/utils::flattenObject",
      "full_component_path": "xyne/server/api/chat/utils::flattenObject",
      "file_path": "xyne/server/api/chat/utils.ts"
    },
    {
      "kind": "function_call",
      "name": "JSON.stringify",
      "resolved_callee": "xyne/server/api/chat/utils::JSON.stringify",
      "full_component_path": "xyne/server/api/chat/utils::JSON.stringify",
      "file_path": "xyne/server/api/chat/utils.ts"
    }
  ],
  "start_line": 134,
  "end_line": 144,
  "full_component_path": "xyne/server/api/chat/utils::flattenObject",
  "jsdoc": null,
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "fullKey",
  "module": "xyne/server/api/chat/utils",
  "value": "fullKey = parentKey ? `${parentKey}.${key}` : key",
  "type_signature": null,
  "start_line": 136,
  "end_line": 136,
  "full_component_path": "xyne/server/api/chat/utils::fullKey",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "isMessageWithContext",
  "module": "xyne/server/api/chat/utils",
  "value": "isMessageWithContext = (message: string) => {\n  return message?.startsWith(\"[{\") && message?.endsWith(\"}]\")\n}",
  "type_signature": null,
  "start_line": 148,
  "end_line": 150,
  "full_component_path": "xyne/server/api/chat/utils::isMessageWithContext",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "getFileIdFromLink",
  "module": "xyne/server/api/chat/utils",
  "value": "getFileIdFromLink = (link: string) => {\n  const regex = /(?:\\/d\\/|[?&]id=)([a-zA-Z0-9_-]+)/\n  const match = link.match(regex)\n  const fileId = match ? match[1] : null\n  return fileId\n}",
  "type_signature": null,
  "start_line": 152,
  "end_line": 157,
  "full_component_path": "xyne/server/api/chat/utils::getFileIdFromLink",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "regex",
  "module": "xyne/server/api/chat/utils",
  "value": "regex = /(?:\\/d\\/|[?&]id=)([a-zA-Z0-9_-]+)/",
  "type_signature": null,
  "start_line": 153,
  "end_line": 153,
  "full_component_path": "xyne/server/api/chat/utils::regex",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "match",
  "module": "xyne/server/api/chat/utils",
  "value": "match = link.match(regex)",
  "type_signature": null,
  "start_line": 154,
  "end_line": 154,
  "full_component_path": "xyne/server/api/chat/utils::match",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "fileId",
  "module": "xyne/server/api/chat/utils",
  "value": "fileId = match ? match[1] : null",
  "type_signature": null,
  "start_line": 155,
  "end_line": 155,
  "full_component_path": "xyne/server/api/chat/utils::fileId",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "extractFileIdsFromMessage",
  "module": "xyne/server/api/chat/utils",
  "value": "extractFileIdsFromMessage = async (\n  message: string,\n): Promise<{\n  totalValidFileIdsFromLinkCount: number\n  fileIds: string[]\n}> => {\n  const fileIds: string[] = []\n  const jsonMessage = JSON.parse(message) as UserQuery\n  let validFileIdsFromLinkCount = 0\n  let totalValidFileIdsFromLinkCount = 0\n  for (const obj of jsonMessage) {\n    if (obj?.type === \"pill\") {\n      fileIds.push(obj?.value?.docId)\n    } else if (obj?.type === \"link\") {\n      const fileId = getFileIdFromLink(obj?.value)\n      if (fileId) {\n        // Check if it's a valid Drive File Id ingested in Vespa\n        // Only works for fileSchema\n        const validFile = await getDocumentOrSpreadsheet(fileId)\n        if (validFile) {\n          totalValidFileIdsFromLinkCount++\n          if (validFileIdsFromLinkCount >= maxValidLinks) {\n            continue\n          }\n          const fields = validFile?.fields as VespaFile\n          // If any of them happens to a spreadsheet, add all its subsheet ids also here\n          if (\n            fields?.app === Apps.GoogleDrive &&\n            fields?.entity === DriveEntity.Sheets\n          ) {\n            const sheetsMetadata = JSON.parse(fields?.metadata as string)\n            const totalSheets = sheetsMetadata?.totalSheets\n            for (let i = 0; i < totalSheets; i++) {\n              fileIds.push(`${fileId}_${i}`)\n            }\n          } else {\n            fileIds.push(fileId)\n          }\n          validFileIdsFromLinkCount++\n        }\n      }\n    }\n  }\n  return { totalValidFileIdsFromLinkCount, fileIds }\n}",
  "type_signature": null,
  "start_line": 158,
  "end_line": 202,
  "full_component_path": "xyne/server/api/chat/utils::extractFileIdsFromMessage",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "fileIds",
  "module": "xyne/server/api/chat/utils",
  "value": "fileIds: string[] = []",
  "type_signature": ": string[]",
  "start_line": 164,
  "end_line": 164,
  "full_component_path": "xyne/server/api/chat/utils::fileIds",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "jsonMessage",
  "module": "xyne/server/api/chat/utils",
  "value": "jsonMessage = JSON.parse(message) as UserQuery",
  "type_signature": null,
  "start_line": 165,
  "end_line": 165,
  "full_component_path": "xyne/server/api/chat/utils::jsonMessage",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "validFileIdsFromLinkCount",
  "module": "xyne/server/api/chat/utils",
  "value": "validFileIdsFromLinkCount = 0",
  "type_signature": null,
  "start_line": 166,
  "end_line": 166,
  "full_component_path": "xyne/server/api/chat/utils::validFileIdsFromLinkCount",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "totalValidFileIdsFromLinkCount",
  "module": "xyne/server/api/chat/utils",
  "value": "totalValidFileIdsFromLinkCount = 0",
  "type_signature": null,
  "start_line": 167,
  "end_line": 167,
  "full_component_path": "xyne/server/api/chat/utils::totalValidFileIdsFromLinkCount",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "fileId",
  "module": "xyne/server/api/chat/utils",
  "value": "fileId = getFileIdFromLink(obj?.value)",
  "type_signature": null,
  "start_line": 172,
  "end_line": 172,
  "full_component_path": "xyne/server/api/chat/utils::fileId",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "validFile",
  "module": "xyne/server/api/chat/utils",
  "value": "validFile = await getDocumentOrSpreadsheet(fileId)",
  "type_signature": null,
  "start_line": 176,
  "end_line": 176,
  "full_component_path": "xyne/server/api/chat/utils::validFile",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "fields",
  "module": "xyne/server/api/chat/utils",
  "value": "fields = validFile?.fields as VespaFile",
  "type_signature": null,
  "start_line": 182,
  "end_line": 182,
  "full_component_path": "xyne/server/api/chat/utils::fields",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "sheetsMetadata",
  "module": "xyne/server/api/chat/utils",
  "value": "sheetsMetadata = JSON.parse(fields?.metadata as string)",
  "type_signature": null,
  "start_line": 188,
  "end_line": 188,
  "full_component_path": "xyne/server/api/chat/utils::sheetsMetadata",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "totalSheets",
  "module": "xyne/server/api/chat/utils",
  "value": "totalSheets = sheetsMetadata?.totalSheets",
  "type_signature": null,
  "start_line": 189,
  "end_line": 189,
  "full_component_path": "xyne/server/api/chat/utils::totalSheets",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "i",
  "module": "xyne/server/api/chat/utils",
  "value": "i = 0",
  "type_signature": null,
  "start_line": 190,
  "end_line": 190,
  "full_component_path": "xyne/server/api/chat/utils::i",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "handleError",
  "module": "xyne/server/api/chat/utils",
  "value": "handleError = (error: any) => {\n  let errorMessage = \"Something went wrong. Please try again.\"\n  if (error?.code === OpenAIError.RateLimitError) {\n    errorMessage = \"Rate limit exceeded. Please try again later.\"\n  } else if (error?.code === OpenAIError.InvalidAPIKey) {\n    errorMessage =\n      \"Invalid API key provided. Please check your API key and ensure it is correct.\"\n  } else if (\n    error?.name === \"ThrottlingException\" ||\n    error?.message === \"Too many tokens, please wait before trying again.\" ||\n    error?.$metadata?.httpStatusCode === 429\n  ) {\n    errorMessage = \"Rate limit exceeded. Please try again later.\"\n  } else if (\n    error?.name === \"ValidationException\" ||\n    error?.message ===\n      \"The model returned the following errors: Input is too long for requested model.\"\n  ) {\n    errorMessage = \"Input context is too large.\"\n  }\n  return errorMessage\n}",
  "type_signature": null,
  "start_line": 204,
  "end_line": 225,
  "full_component_path": "xyne/server/api/chat/utils::handleError",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "errorMessage",
  "module": "xyne/server/api/chat/utils",
  "value": "errorMessage = \"Something went wrong. Please try again.\"",
  "type_signature": null,
  "start_line": 205,
  "end_line": 205,
  "full_component_path": "xyne/server/api/chat/utils::errorMessage",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "convertReasoningStepToText",
  "module": "xyne/server/api/chat/utils",
  "value": "convertReasoningStepToText = (\n  step: AgentReasoningStep,\n): string => {\n  switch (step.type) {\n    case AgentReasoningStepType.AnalyzingQuery:\n      return step.details\n    case AgentReasoningStepType.Iteration:\n      return `### Iteration ${step.iteration} \\n`\n    case AgentReasoningStepType.Planning:\n      return step.details + \"\\n\" // e.g., \"Planning next step...\"\n    case AgentReasoningStepType.ToolSelected:\n      return `Tool selected: ${step.toolName} \\n`\n    case AgentReasoningStepType.ToolParameters:\n      const params = Object.entries(step.parameters)\n        .map(\n          ([key, value]) =>\n            `\u2022 ${key}: ${typeof value === \"object\" ? JSON.stringify(value) : String(value)}`,\n        )\n        .join(\"\\n\")\n      return `Parameters:\\n${params} \\n`\n    case AgentReasoningStepType.ToolExecuting:\n      return `Executing tool: ${step.toolName}...\\n`\n    case AgentReasoningStepType.ToolResult:\n      let resultText = `Tool result (${step.toolName}): ${step.resultSummary}`\n      if (step.itemsFound !== undefined) {\n        resultText += ` (Found ${step.itemsFound} item(s))`\n      }\n      if (step.error) {\n        resultText += `\\nError: ${step.error}\\n`\n      }\n      return resultText + \"\\n\"\n    case AgentReasoningStepType.Synthesis:\n      return step.details + \"\\n\" // e.g., \"Synthesizing answer from X fragments...\"\n    case AgentReasoningStepType.ValidationError:\n      return `Validation Error: ${step.details} \\n`\n    case AgentReasoningStepType.BroadeningSearch:\n      return `Broadening Search: ${step.details}\\n`\n    case AgentReasoningStepType.LogMessage:\n      return step.message + \"\\n\"\n    default:\n      return \"Unknown reasoning step\"\n  }\n}\n",
  "type_signature": null,
  "start_line": 227,
  "end_line": 269,
  "full_component_path": "xyne/server/api/chat/utils::convertReasoningStepToText",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "params",
  "module": "xyne/server/api/chat/utils",
  "value": "params = Object.entries(step.parameters)\n        .map(\n          ([key, value]) =>\n            `\u2022 ${key}: ${typeof value === \"object\" ? JSON.stringify(value) : String(value)}`,\n        )\n        .join(\"\\n\")\n ",
  "type_signature": null,
  "start_line": 240,
  "end_line": 245,
  "full_component_path": "xyne/server/api/chat/utils::params",
  "file_path": "xyne/server/api/chat/utils.ts"
}
{
  "kind": "variable",
  "name": "sultText =",
  "module": "xyne/server/api/chat/utils",
  "value": "sultText = `Tool result (${step.toolName}): ${step.resultSummary}`\n ",
  "type_signature": null,
  "start_line": 250,
  "end_line": 250,
  "full_component_path": "xyne/server/api/chat/utils::sultText =",
  "file_path": "xyne/server/api/chat/utils.ts"
}
